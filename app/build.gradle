apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'

apply plugin: 'jacoco'
apply from: '../jacoco.gradle'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.demo.weather"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '21'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.0'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.14.0"

    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'com.android.support:multidex:1.0.3'

    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    // Room
    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    // dependency injection
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Jackson
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // Moshi
    implementation "com.squareup.retrofit2:converter-moshi:2.4.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.okhttp3:okhttp:4.4.0"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "androidx.test:runner:$androidx_test_version"
    testImplementation "androidx.test:core:$androidx_test_version"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2'

    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.1'
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version") {
        exclude group: 'com.google.code.findbugs'
    }
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espresso_version") {
        exclude group: 'androidx.legacy'
        exclude group: 'androidx.print', module: 'print'
        exclude group: 'androidx.documentfile', module: 'documentfile'
        exclude group: 'androidx.localbroadcastmanager', module: 'localbroadcastmanager'
    }

}

//task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
//}
